<div class="container-fluid no-pad">

  <button id="menu-toggle" class="menu-toggle"><span>Menu</span></button>

  <div id="tabs">

    <div id="theSidebar" class="sidebar">
      <button class="close-button fa fa-fw fa-close"></button>
      <h1><span>Animated</span> Grid Layout</h1>
      <nav class="codrops-demos">
        <ul>
          <% @brain_dump_categories.each do |category| %>
            <li id="category_<%= category.id %>" ><a href="#<%= category.name.downcase.gsub(' ','_') %>"><%= category.name %></a></li>
          <% end %>
        </ul>
      </nav>
    </div>


    <div id="theGrid" class="main">
      <section class="grid">

        <header class="top-bar">
          <h2 class="top-bar__headline">Brain dump items</h2>
          <div class="filter">
            <span>Filter by:</span>
            <span class="dropdown">Popular</span>
          </div>
        </header>

        <% @brain_dump_categories.each do |category| %>

          <div id="<%= category.name.downcase.gsub(' ','_') %>" style="display:none;width:100%;">

            <% category.brain_dumps.each do |item| %>
              <a class="grid__item" href="#">

                <h2 class="title title--preview"><%= item.word.humanize %></h2>
                <div class="loader"></div>
                <span class="category"><%= item.assignees.count %> assigned / <%= pluralize(item.brain_dump_notes.count, 'Note') %></span>
                <div class="meta meta--preview">
                  <img class="meta__avatar" src="img/authors/1.png" alt="author01" />
                  <span class="meta__date"><i class="fa fa-calendar-o"></i> 9 Apr</span>
                  <span class="meta__reading-time"><i class="fa fa-clock-o"></i> 3 min read</span>
                </div>
              </a>
            <% end %>

          </div>

        <% end %>

      </section>


      <section class="content">

        <div class="scroll-wrap">

          <% @brain_dump_items.each do |item| %>

            <div class="content__item">
              <div class="meta meta--full">

                <div class="word-header-container">
                  <span class="circle" data-done="<%= item.done? %>" data-id="<%= item.id %>"><i class="fa fa-check"></i></span>
                  <h4 class="word-header"><%= item.word.humanize %></h4>
                  <span class="assign-due-date">Due: <input type="text" class="datepicker" value="<%= item.due_date.present? ? item.due_date.strftime('%m/%d/%Y') : 'No due date selected' %>" data-id="<%= item.id %>"></span>
                </div>
                <!-- <img class="meta__avatar" src="img/authors/1.png" alt="author01" /> -->
                <!-- <span class="meta__author">Matthew Walters</span> -->
                <!-- <span class="meta__date"><i class="fa fa-calendar-o"></i> 9 Apr</span> -->
                <!-- <span class="meta__reading-time"><i class="fa fa-clock-o"></i> 3 min read</span> -->
                <div class="item_content col-md-12 no-pad" data-brain-dump-id="<%= item.id %>">

                  <% if item.assignees.present? %>
                    <p class="text-muted ital meta-header">Team members assigned to this item:</p>
                    <ul class="assignees" data-id="<%= item.id %>">
                      <% item.assignees.each do |assignee| %>
                        <li><span data-toggle="tooltip" data-placement="left" title="<%= assignee.name %>" data-trigger="hover"><%= image_tag 'default_avatar.png', class: "user-img"  %></span></li>
                      <% end %>
                    </ul>
                  <% else %>
                    <p class="text-muted ital meta-header">There are no team members assigned to this item.</p>
                    <ul class="assignees" data-id="<%= item.id %>"></ul>
                  <% end %>

                  <div class="actions-bar">
                    <p><b>Add a new:</b></p>
                    <a href="#" class="blue-btn blue-btn-hover show-note-form">Note</a>
                    <a href="#" class="blue-btn blue-btn-hover show-file-form">File</a>
                  </div>

                  <div id="NoteForm" class="hidden"><%= render 'brain_dump_notes/note_form', word: item %></div>
                  <div id="FileForm" class="hidden"><%= render 'brain_dump_notes/file_form', word: item %></div>



                  <ul id="brainDumpNotesList" class="col-md-12 no-pad">
                    <% if item.brain_dump_notes.present? %>

                      <hr>

                      <% item.brain_dump_notes.order('created_at DESC').each do |note| %>
                        <%= render 'brain_dump_notes/note', note: note %>
                      <% end %>

                    <% end %>
                  </ul>

                </div><!-- // .item_content -->

              </div>
            </div>

          <% end %>

        </div>

        <button class="close-button"><i class="fa fa-close"></i><span>Close</span></button>

      </section>
    </div>
  </div><!-- /grid -->
</div><!-- /container -->






<script>

  $(document).ready(function() {
    $("#tabs").tabs();

    $.each($('.datepicker'), function() {
      $(this).val($(this).attr('value'));
    });

    // $('.datepicker').datepicker({
    //   nextText: ">",
    //   prevText: "<",
    //   onSelect: function(dateText, inst) {
    //     var id = $(this).attr('data-id');

    //     var dateAsObject = $(this).datepicker( 'getDate' );

    //     $.ajax({
    //       url: window.location.origin + "/brain_dumps/" + id + "/update_due_date",
    //       type: "PUT",
    //       data: { due_date: dateAsObject },
    //       format: 'json',
    //       success:function(data, textStatus, jqXHR) {
    //       },
    //       error: function(jqXHR, textStatus, errorThrown){
    //       }
    //     });
    //   }
    // });
  });


  (function() {

  var bodyEl = document.body,
    docElem = window.document.documentElement,
    support = { transitions: Modernizr.csstransitions },
    // transition end event name
    transEndEventNames = { 'WebkitTransition': 'webkitTransitionEnd', 'MozTransition': 'transitionend', 'OTransition': 'oTransitionEnd', 'msTransition': 'MSTransitionEnd', 'transition': 'transitionend' },
    transEndEventName = transEndEventNames[ Modernizr.prefixed( 'transition' ) ],
    onEndTransition = function( el, callback ) {
      var onEndCallbackFn = function( ev ) {
        if( support.transitions ) {
          if( ev.target != this ) return;
          this.removeEventListener( transEndEventName, onEndCallbackFn );
        }
        if( callback && typeof callback === 'function' ) { callback.call(this); }
      };
      if( support.transitions ) {
        el.addEventListener( transEndEventName, onEndCallbackFn );
      }
      else {
        onEndCallbackFn();
      }
    },
    gridEl = document.getElementById('theGrid'),
    sidebarEl = document.getElementById('theSidebar'),
    gridItemsContainer = gridEl.querySelector('section.grid'),
    contentItemsContainer = gridEl.querySelector('section.content'),
    gridItems = gridItemsContainer.querySelectorAll('.grid__item'),
    contentItems = contentItemsContainer.querySelectorAll('.content__item'),
    closeCtrl = contentItemsContainer.querySelector('.close-button'),
    current = -1,
    lockScroll = false, xscroll, yscroll,
    isAnimating = false,
    menuCtrl = document.getElementById('menu-toggle'),
    menuCloseCtrl = sidebarEl.querySelector('.close-button');

  /**
   * gets the viewport width and height
   * based on http://responsejs.com/labs/dimensions/
   */
  function getViewport( axis ) {
    var client, inner;
    if( axis === 'x' ) {
      client = docElem['clientWidth'];
      inner = window['innerWidth'];
    }
    else if( axis === 'y' ) {
      client = docElem['clientHeight'];
      inner = window['innerHeight'];
    }

    return client < inner ? inner : client;
  }
  function scrollX() { return window.pageXOffset || docElem.scrollLeft; }
  function scrollY() { return window.pageYOffset || docElem.scrollTop; }

  function init() {
    initEvents();
  }

  function initEvents() {
    [].slice.call(gridItems).forEach(function(item, pos) {
      // grid item click event
      item.addEventListener('click', function(ev) {
        ev.preventDefault();
        if(isAnimating || current === pos) {
          return false;
        }
        isAnimating = true;
        // index of current item
        current = pos;
        // simulate loading time..
        classie.add(item, 'grid__item--loading');
        setTimeout(function() {
          classie.add(item, 'grid__item--animate');
          // reveal/load content after the last element animates out (todo: wait for the last transition to finish)
          setTimeout(function() { loadContent(item); }, 500);
        }, 1000);
      });
    });

    closeCtrl.addEventListener('click', function() {
      // hide content
      hideContent();
    });

    // keyboard esc - hide content
    document.addEventListener('keydown', function(ev) {
      if(!isAnimating && current !== -1) {
        var keyCode = ev.keyCode || ev.which;
        if( keyCode === 27 ) {
          ev.preventDefault();
          if ("activeElement" in document)
              document.activeElement.blur();
          hideContent();
        }
      }
    } );

    // hamburger menu button (mobile) and close cross
    menuCtrl.addEventListener('click', function() {
      if( !classie.has(sidebarEl, 'sidebar--open') ) {
        classie.add(sidebarEl, 'sidebar--open');
      }
    });

    menuCloseCtrl.addEventListener('click', function() {
      if( classie.has(sidebarEl, 'sidebar--open') ) {
        classie.remove(sidebarEl, 'sidebar--open');
      }
    });
  }

  function loadContent(item) {
    // add expanding element/placeholder
    var dummy = document.createElement('div');
    dummy.className = 'placeholder';

    // set the width/heigth and position
    dummy.style.WebkitTransform = 'translate3d(' + (item.offsetLeft - 5) + 'px, ' + (item.offsetTop - 5) + 'px, 0px) scale3d(' + item.offsetWidth/gridItemsContainer.offsetWidth + ',' + item.offsetHeight/getViewport('y') + ',1)';
    dummy.style.transform = 'translate3d(' + (item.offsetLeft - 5) + 'px, ' + (item.offsetTop - 5) + 'px, 0px) scale3d(' + item.offsetWidth/gridItemsContainer.offsetWidth + ',' + item.offsetHeight/getViewport('y') + ',1)';

    // add transition class
    classie.add(dummy, 'placeholder--trans-in');

    // insert it after all the grid items
    gridItemsContainer.appendChild(dummy);

    // body overlay
    classie.add(bodyEl, 'view-single');

    setTimeout(function() {
      // expands the placeholder
      dummy.style.WebkitTransform = 'translate3d(-5px, ' + (scrollY() - 5) + 'px, 0px)';
      dummy.style.transform = 'translate3d(-5px, ' + (scrollY() - 5) + 'px, 0px)';
      // disallow scroll
      window.addEventListener('scroll', noscroll);
    }, 25);

    onEndTransition(dummy, function() {
      // add transition class
      classie.remove(dummy, 'placeholder--trans-in');
      classie.add(dummy, 'placeholder--trans-out');
      // position the content container
      contentItemsContainer.style.top = scrollY() + 'px';
      // show the main content container
      classie.add(contentItemsContainer, 'content--show');
      // show content item:
      classie.add(contentItems[current], 'content__item--show');
      // show close control
      classie.add(closeCtrl, 'close-button--show');
      // sets overflow hidden to the body and allows the switch to the content scroll
      classie.addClass(bodyEl, 'noscroll');

      isAnimating = false;


    });
  }

  function hideContent() {
    var gridItem = gridItems[current], contentItem = contentItems[current];

    classie.remove(contentItem, 'content__item--show');
    classie.remove(contentItemsContainer, 'content--show');
    classie.remove(closeCtrl, 'close-button--show');
    classie.remove(bodyEl, 'view-single');

    setTimeout(function() {
      var dummy = gridItemsContainer.querySelector('.placeholder');

      classie.removeClass(bodyEl, 'noscroll');

      dummy.style.WebkitTransform = 'translate3d(' + gridItem.offsetLeft + 'px, ' + gridItem.offsetTop + 'px, 0px) scale3d(' + gridItem.offsetWidth/gridItemsContainer.offsetWidth + ',' + gridItem.offsetHeight/getViewport('y') + ',1)';
      dummy.style.transform = 'translate3d(' + gridItem.offsetLeft + 'px, ' + gridItem.offsetTop + 'px, 0px) scale3d(' + gridItem.offsetWidth/gridItemsContainer.offsetWidth + ',' + gridItem.offsetHeight/getViewport('y') + ',1)';

      onEndTransition(dummy, function() {
        // reset content scroll..
        contentItem.parentNode.scrollTop = 0;
        gridItemsContainer.removeChild(dummy);
        classie.remove(gridItem, 'grid__item--loading');
        classie.remove(gridItem, 'grid__item--animate');
        lockScroll = false;
        window.removeEventListener( 'scroll', noscroll );
      });

      // reset current
      current = -1;
    }, 25);
  }

  function noscroll() {
    if(!lockScroll) {
      lockScroll = true;
      xscroll = scrollX();
      yscroll = scrollY();
    }
    window.scrollTo(xscroll, yscroll);
  }

  init();

})();
</script>
